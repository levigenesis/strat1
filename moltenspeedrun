local ReplicatedStorage = game:GetService("ReplicatedStorage")
local RunService = game:GetService("RunService")
local Players = game:GetService("Players")
local TweenService = game:GetService("TweenService")

local Things = workspace:WaitForChild("__THINGS")
local Active = Things.__INSTANCE_CONTAINER:WaitForChild("Active")
local Player = Players.LocalPlayer
local character = Player.Character or Player.CharacterAdded:Wait()
local humanoidRootPart = character:WaitForChild("HumanoidRootPart")
local ActiveBlocks = Active.AdvancedDigsite.Important.ActiveBlocks
local ActiveChests = Active.AdvancedDigsite.Important.ActiveChests

local ReplicatedStorage = game:GetService("ReplicatedStorage")
local Network = ReplicatedStorage:WaitForChild("Network")
local Instancing_FireCustomFromClient = Network:WaitForChild("Instancing_FireCustomFromClient")

local function getCurrentActive()
    return Active:GetChildren()[1]
end

local function getChest()
    return ActiveChests:GetChildren()[1]
end

local function getBlock()
    local blocks = ActiveBlocks:GetChildren()
    for i = #blocks, 1, -1 do
        local currentBlock = blocks[i]
        local color = currentBlock.Color
        if color.R > 0.067 or color.G > 0.067 or color.B > 0.067 then
            local coord = currentBlock:GetAttribute('Coord')
            if coord.X > 1 and coord.X < 16 and coord.Z > 1 and coord.Z < 16 then
                return currentBlock
            end
        end
    end
    return nil
end

local function digChest(chest)
    humanoidRootPart.CFrame = chest:FindFirstChildWhichIsA("BasePart").CFrame
    Instancing_FireCustomFromClient:FireServer(getCurrentActive().Name, "DigChest", chest:GetAttribute('Coord'))
end

local function digBlock(block)
    humanoidRootPart.CFrame = block.CFrame
    Instancing_FireCustomFromClient:FireServer(getCurrentActive().Name, "DigBlock", block:GetAttribute('Coord'))
end

local function dig()
    local chest = getChest()
    if chest then
        for j = 1, 20 do
            if chest.Parent == ActiveChests then
                digChest(chest)
                wait(0.2)
            else
                break
            end
        end
        if chest.Parent == ActiveChests then
            chest:Destroy()
        end
    else
        local block = getBlock()
        for j = 1, 100 do
            if block.Parent == ActiveBlocks then
                digBlock(block)
                wait(0.2)
            else
                break
            end
        end
        if block.Parent == ActiveBlocks then
            block:Destroy()
        end
    end
end

-- Teleport to the Dungeon area (79) and then to the rock-door
local dungeonName = "79 | Dungeon"
local instanceName = "rock-door"

local function teleportPlayerToLocation(locationPath)
    local map = game:GetService("Workspace").Map
    local player = game.Players.LocalPlayer
    local location = map[locationPath] and map[locationPath].PERSISTENT and map[locationPath].PERSISTENT.Teleport

    if location then
        local humanoidRootPart = player.Character and player.Character:FindFirstChild("HumanoidRootPart")

        if humanoidRootPart then
            humanoidRootPart.CFrame = location.CFrame
        end
    end
end

teleportPlayerToLocation(dungeonName)
wait(2)  -- Adjust the wait time as needed

-- Check if the specified dungeon exists in the map
local map = game:GetService("Workspace").Map
local dungeon = map[dungeonName]

if dungeon and dungeon.INTERACT and dungeon.INTERACT.Instances and dungeon.INTERACT.Instances[instanceName] then
    local doorInstance = dungeon.INTERACT.Instances[instanceName]
    humanoidRootPart.CFrame = CFrame.new(doorInstance.Position)
else
    warn("Specified dungeon or instance not found.")
end

local Fluent = loadstring(game:HttpGet("https://github.com/dawid-scripts/Fluent/releases/latest/download/main.lua"))()
local SaveManager = loadstring(game:HttpGet("https://raw.githubusercontent.com/dawid-scripts/Fluent/master/Addons/SaveManager.lua"))()
local InterfaceManager = loadstring(game:HttpGet("https://raw.githubusercontent.com/dawid-scripts/Fluent/master/Addons/InterfaceManager.lua"))()

local Window = Fluent:CreateWindow({
    Title = "Ani's script PS99",
    SubTitle = "by Ani",
    TabWidth = 160,
    Size = UDim2.fromOffset(580, 460),
    Acrylic = false,
    Theme = "Dark",
    MinimizeKey = Enum.KeyCode.Delete
})

local Tabs = {
    Digging = Window:AddTab({ Title = "Digging", Icon = "" }),
}

local Options = Fluent.Options

do
    local Toggle = Tabs.Digging:AddToggle("DigSite", { Title = "Auto AdvancedDigsite", Default = false })
    Toggle:OnChanged(function()
        local isToggled = Options.DigSite.Value
        local humanoidRootPartCFrame = humanoidRootPart.CFrame
        local characterChildren = character:GetChildren()

        for _, part in ipairs(characterChildren) do
            if part:IsA("BasePart") then
                part.CanCollide = not isToggled
                part.Velocity = Vector3.new(0, 0, 0)
            end
        end

        local orbs = workspace.__THINGS.Orbs:GetChildren()

        spawn(function()
            while isToggled and wait() do
                pcall(dig)
            end
        end)

        spawn(function()
            while isToggled and wait(1) do
                for _, orb in ipairs(orbs) do
                    orb.Position = humanoidRootPartCFrame.Position
                end
            end
        end)
    end)
end

SaveManager:SetLibrary(Fluent)
InterfaceManager:SetLibrary(Fluent)
SaveManager:IgnoreThemeSettings()
SaveManager:SetIgnoreIndexes({})
InterfaceManager:SetFolder("AniHub")
SaveManager:SetFolder("AniHub/specific-game")

InterfaceManager:BuildInterfaceSection(Tabs.Digging)
SaveManager:BuildConfigSection(Tabs.Digging)

Window:SelectTab(1)

Fluent:Notify({
    Title = "Ani's fix script'",
    Content = "Script loaded.",
    Duration = 4
})

SaveManager:LoadAutoloadConfig()
